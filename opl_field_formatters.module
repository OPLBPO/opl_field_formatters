<?php

/**
 * @file
 * Custom field formatters module
 *
 */

/**
 * Implements hook_field_formatter_info().
 */

function opl_field_formatters_field_formatter_info() {
  return array(
    'event_card_dates' => array(
      'label' => t('Event card dates'),
      'field types' => array('datestamp'),
    ),
    'event_node_full_dates' => array(
      'label' => t('Event node full dates'),
      'field types' => array('datestamp'),
    ),
    'blog_category_search_link' => array(
      'label' => t('Blog category search API link-back'),
      'field types' => array('entityreference'),
    ),
    'branch_title_with_address' => array(
      'label' => t('Branch title with address'),
      'field types' => array('entityreference'),
    ),
    'event_add_to_calendar' => array(
      'label' => t('OPL add event to calendar'),
      'field types' => array('datestamp'),
    ),
    'event_status_details' => array(
      'label' => t('Event status details'),
      'field types' => array('list_boolean'),
    )

  );
}

/**
 * Implements hook_field_formatter_view().
 */

function opl_field_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  $lang = $language->language;
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'event_card_dates':
      $event_lang = $entity->language;
      $event_status = '';
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $sorted_dates = array();
      foreach ($items as $delta => $item) {
        if ($item['value'] > time()) {
          $sorted_dates[] = $item;
        }
      }
      $date_count = count($sorted_dates);
      if ($lang == 'en') {
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '<p>' . t('Sorry, this event has been cancelled.') . '</p>';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0]['value'], 'custom', ' l ') . format_date($sorted_dates[0]['value'], 'event_day') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
        } else {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0]['value'], 'custom', ' l') . 's, ' . t(' until ') . format_date($sorted_dates[$date_count - 1]['value'], 'event_day') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
        }
      } else {
        setlocale(LC_ALL, 'fr_CA.utf8');
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '<p>' . t('Sorry, this event has been cancelled.') . '</p>';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . 'Le ' . format_date($sorted_dates, 'custom', ' l ') . format_date($sorted_dates, 'event_day') . t(' at ') . format_date($sorted_dates, 'event_time') . '</p>';
        } else {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . 'Les ' . strtolower(trim(format_date($sorted_dates[0]['value'], 'custom', ' l'))) . 's, ' . t(' until ') . format_date($sorted_dates[$date_count - 1]['value'], 'custom', 'j F') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
        }
      }
      break;

    case 'event_node_full_dates':
     // dpm($items);
      $event_lang = $entity->language;
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $start_date = $items[0]['value'];
      $sorted_dates = array();
      foreach ($items as $delta => $item) {
        if ($item['value'] > time()) {
          $sorted_dates[] = $item;
        }
      }
      // dpm($sorted_dates);

      $date_count = count($sorted_dates);
      if ($lang == 'en') {
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0]['value'], 'custom', ' l ') . format_date($sorted_dates[0]['value'], 'event_day') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
        } else {
         // $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . t('Start date: ') . format_date($start_date, 'event_day') . '<br/>' . format_date($sorted_dates[0]['value'], 'custom', ' l') . 's, ' . t(' until ') . format_date($sorted_dates[$date_count - 1]['value'], 'event_day') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0]['value'], 'custom', ' l') . 's, ' . format_date($start_date, 'event_day') . t(' - ') . format_date($sorted_dates[$date_count - 1]['value'], 'event_day') . '<br/>' . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';

        }
      } else {
        setlocale(LC_ALL, 'fr_CA.utf8');
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '<p>' . t('Sorry, this event has been cancelled.') . '</p>';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . 'Le ' . format_date($sorted_dates[0]['value'], 'custom', ' l ') . format_date($sorted_dates[0]['value'], 'event_day') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
        } else {
         // $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . t('Start date: ') . format_date($start_date, 'event_day') . '<br/>' . 'Les ' . strtolower(trim(format_date($sorted_dates[0]['value'], 'custom', ' l'))) . 's, ' . t(' until ') . format_date($sorted_dates[$date_count - 1]['value'], 'custom', 'j F') . t(' at ') . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . 'Les ' . strtolower(trim(format_date($sorted_dates[0]['value'], 'custom', ' l'))) . 's, ' . format_date($start_date, 'custom', 'j F, Y') . t(' - ') . format_date($sorted_dates[$date_count - 1]['value'], 'custom', 'j F, Y') . '<br/>' . format_date($sorted_dates[0]['value'], 'event_time') . '</p>';
        }
      }
      break;

    case 'blog_category_search_link':
     // dpm($items);
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);
        $translated_term = i18n_taxonomy_localize_terms($term);

        $display_terms = l(
            $translated_term->name,
            'staff-blogs',
            array('query' => array('f[' . $delta . ']'=>'taxonomy_vocabulary_21:'.$tid
            )));


        $element[$delta]['#markup'] = $display_terms;
      }

      break;

    case 'branch_title_with_address':
     // dpm($items);
      foreach ($items as $delta => $item) {
        $nid = $item['target_id'];
        $node = node_load($item['target_id']);
        $address = $node->field_branch_location[LANGUAGE_NONE][0]['street'];
        $room_info = _opl_field_formatters_get_reservations($entity);
        $remaining = count($room_info);
        $room = $room_info[0]['room'];
        $duration = $room_info[0]['duration'];



        $link = l(
            $node->title,
            drupal_get_path_alias('node/' . $nid, $lang)) . '<br/><div class="street-address">' . $address . '</div>
            <div class="event-room">' . $room . '</div><div class="event-duration">' . $duration . '</div>';


        $element[$delta]['#markup'] = $link;
      }

      break;
    
    case 'event_add_to_calendar':
      $event_lang = $entity->language;
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $nid = $entity->nid;
      if ($event_status <> 'cancelled') {
        $link = '<h3>' .l(t('Add this event to your calendar'), 'node/' . $nid . '/opl_add_to_calendar.ics', array('attributes' => array('class' => array('label label-primary')))) . '</h3>';
      } else {
        $link = NULL;
      }
      $element[0]['#markup'] = $link;

      break;

    case 'event_status_details':
      global $user;
      $event_status = opl_registration_event_status($entity);
      $reg_start = str_replace('h 00', 'h', format_date($entity->field_registration_open[LANGUAGE_NONE][0]['value'], 'long'));
      switch ($event_status) {
        case 'no-reg-open' :
          $status_text = '<h3><span class="label label-info">' . t('Drop-in program') . '</span></h3>';
          break;
        case 'cancelled' :
          $status_text = '<h3><span class="label label-danger">' . t('Sorry, this event has been cancelled') . '</span></h3>';
          break;
        case 'open' :
          $user == 0 ? $status_text = '<h3>' . l(t('Log in and register'), 'opluser/login', array('query' => array('nid' => $entity->nid), 'attributes' => array('class' => array('btn btn-success')))) . '</h3>'
           : $status_text = '<h3>' . l(t('Register'), 'opluser/login', array('query' => array('nid' => $entity->nid), 'attributes' => array('class' => array('btn btn-success')))) . '</h3>';
          break;
        case 'waitlist' :
          $status_text = '<h3>' . l(t('Add me to the waiting list'), 'opluser/login', array('query' => array('nid' => $entity->nid), 'attributes' => array('class' => array('btn btn-warning')))) . '</h3>';
          break;
        case 'waitlist-full' :
          $status_text = '<h3><span class="label label-danger">' . t('Sorry this event and its waiting list are full') . '</span></h3>';
          break;
        case 'full' :
          $status_text = '<h3><span class="label label-danger">' . t('Sorry this event is full') . '</span></h3>';
          break;
        case 'reg:not-yet-open' :
          $status_text = '<h3><span class="label label-info">' . t('Registration opens on ') . $reg_start . '</span></h3>';
          break;
      }

      $element[0]['#markup'] = $status_text;

      break;
  }

  //dpm($element);

  return $element;
}



/**
 * Implements hook_menu().
 */
function opl_field_formatters_menu() {
  $items = array();

  $items['node/%node/opl_add_to_calendar.ics'] = array(
      'title' => t('Add to Calendar'),
      'page callback' => 'opl_field_formatters_ics_download',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('view', 1),
      'type' => MENU_CALLBACK,
  );

  return $items;
}



/*
 * Calendar functions
 */

function opl_field_formatters_ics_download($node) {
  global $language;
  $lang = $language->language;

  drupal_add_http_header('Content-Type','text/calendar; charset=utf-8;');
  drupal_add_http_header('Content-Disposition','inline; filename="add_to_calendar.ics";');

// 	$description = t("Read more at !link", array('!link' => url('node/' . $node->nid, array('absolute' => TRUE))));
  $description = isset($node->body['en'][0]['safe_value']) ? $node->body['en'][0]['safe_value'] : $node->body[LANGUAGE_NONE][0]['safe_value'];
  $created = date("Ymd\THis\Z",$node->created);
  $reservations = opl_reservation_load_by_nid($node->nid);
  if (isset($reservations) && !empty($reservations)) {
    $dates = array();
    // $loc_details = array();
    foreach ($reservations as $rid => $reservation) {
      $dates[] = $reservation->field_reservation_date[LANGUAGE_NONE][0]['value'];
    }
  }
  $title = $node->title;
  $date_c = array();
  $branch_id = $node->field_event_branch[LANGUAGE_NONE][0]['target_id'];
  $branch = node_load($branch_id);
  $branch_name = $branch->title;

  foreach ($dates as $key => $value) {
    if (isset($value) && !empty($value) && $value >= strtotime('today')) {
      $date_c[] = $value;
    }
  }
  $duration = $reservation->field_event_duration[LANGUAGE_NONE][0]['value'];
  $date_output = '';
  foreach ($date_c as $did=>$date) {
    $startdate = date("Ymd\THis",$date);
    $enddate = date("Ymd\THis",($date + ($duration * 60)));
    $date_output .= "BEGIN:VEVENT
DTSTAMP:$created
UID:event$node->nid-$did@biblioottawalibrary.ca
ORGANIZER;CN=Ottawa Public Library:MAILTO:infoservice@biblioottawalibrary.ca
DTSTART;TZID=America/Toronto:$startdate
DTEND;TZID=America/Toronto:$enddate
SUMMARY:$title
DESCRIPTION:$description
LOCATION:$branch_name
SEQUENCE:0
END:VEVENT\r\n";
  }

  print "BEGIN:VCALENDAR
PRODID:-//Calendar//Calendar Event//EN
VERSION:2.0
METHOD:PUBLISH
$date_output
END:VCALENDAR";
  exit();
}

/*
 * wrapper function around opl_reservation_load_by_nid
 */

//function _opl_field_formatters_get_reservations(&$entity) {
//  global $language;
//  $sorted_dates = array();
//  $curdates = array();
//  $reservations = opl_reservation_load_by_nid($entity->nid);
//
//  //if there's registrations and the event is not past, cancelled
//  if (isset($reservations) && !empty($reservations)) {
//    $loc_details = array();
//    foreach ($reservations as $rid => $reservation) {
//      $meeting_room_node = node_load($reservation->field_meeting_room[LANGUAGE_NONE][0]['target_id']);
//      //Test Getachew
//      $eventdate = format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value']);
//      $onlydate = explode(' - ', $eventdate);
//      $todayd= date("F d, Y");
//      if ($language->language == 'fr'){
//        setlocale(LC_ALL, 'fr_CA.utf8');
//        $todayf= strftime("%A %d %B %Y", mktime(0, 0, 0, date("m"), date("d"), date("Y")));
//      }
//
//      //if( strtotime($onlydate[0]) > strtotime($todayd)){
//      if( $reservation->field_reservation_date[LANGUAGE_NONE][0]['value'] > strtotime($todayd))
//        $sorted_dates[] = $reservation->field_reservation_date[LANGUAGE_NONE][0]['value'];
//
//      //end
//      $loc_details[] = array(
//          'date' => str_replace('h 00', 'h', format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value'], 'long')),
//          'room' => $meeting_room_node->title,
//          'duration' => $reservation->field_event_duration[LANGUAGE_NONE][0]['value'] . ' ' . t('mins.'),
//      );
//    }
//    asort($sorted_dates);
//
//    foreach ($sorted_dates as $sd => $sorted_date) {
//      $curdates[] = str_replace('h 00', 'h', format_date($sorted_date, 'long'));
//    }
//
//    $dates = '';
//    if (!empty($loc_details[0]['date'])) {
//      $dates = array();
//      foreach ($loc_details as $date) {
//        if (isset($date['date'])) $dates[] = $date['date'];
//      }
//    }
//    $date_count = count($dates);
//    if (!empty($loc_details[0]['room'])) $vars['room'] = $loc_details[0]['room'];
//    if (!empty($loc_details[0]['duration'])) $vars['duration'] = $loc_details[0]['duration'];
//
//    $start_time = str_replace('h00', 'h', format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value'], 'event_time'));
//
//  }
//  //printAndDie($vars['dates'], $vars['reg_status']);
//
//}

function _opl_field_formatters_get_reservations(&$entity) {
  global $language;
  $sorted_dates = array();
  $curdates = array();
  $reservations = opl_reservation_load_by_nid($entity->nid);

  //if there's registrations and the event is not past, cancelled
  if (isset($reservations) && !empty($reservations)) {
    $loc_details = array();
    foreach ($reservations as $rid => $reservation) {
      $meeting_room_node = node_load($reservation->field_meeting_room[LANGUAGE_NONE][0]['target_id']);
      //Test Getachew
      $eventdate = format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value']);
      $onlydate = explode(' - ', $eventdate);
      $todayd= date("F d, Y");
      if ($language->language == 'fr'){
        setlocale(LC_ALL, 'fr_CA.utf8');
        $todayf= strftime("%A %d %B %Y", mktime(0, 0, 0, date("m"), date("d"), date("Y")));
      }

      //if( strtotime($onlydate[0]) > strtotime($todayd)){
      if ($reservation->field_reservation_date[LANGUAGE_NONE][0]['value'] > strtotime($todayd))
        $sorted_dates[] = $reservation->field_reservation_date[LANGUAGE_NONE][0]['value'];

      //end
//      $loc_details[] = array(
//          'date' => str_replace('h 00', 'h', format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value'], 'long')),
//          'room' => $meeting_room_node->title,
//          'duration' => $reservation->field_event_duration[LANGUAGE_NONE][0]['value'] . ' ' . t('mins.'),
//      );
    }
    asort($sorted_dates);

    foreach ($sorted_dates as $sd => $sorted_date) {
      $curdates[] = str_replace('h 00', 'h', format_date($sorted_date, 'long'));
      $loc_details[] = array(
          'date' => $curdates[$sd],
          'room' => $meeting_room_node->title,
          'duration' => $reservation->field_event_duration[LANGUAGE_NONE][0]['value'] . ' ' . t('mins.'),
      );
    }


  }
  return $loc_details;
}
