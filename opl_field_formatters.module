<?php

/**
 * @file
 * Custom field formatters module
 *
 */

/**
 * Implements hook_field_formatter_info().
 */

function opl_field_formatters_field_formatter_info() {
  return array(
    'event_card_dates' => array(
      'label' => t('Event card dates'),
      'field types' => array('datestamp'),
    ),
    'event_node_full_dates' => array(
      'label' => t('Event node full dates'),
      'field types' => array('datestamp'),
    ),
    'event_node_full_date_list' => array(
      'label' => t('Event node list of all dates'),
      'field types' => array('datestamp'),
    ),
    'blog_category_search_link' => array(
      'label' => t('Blog category search API link-back'),
      'field types' => array('entityreference'),
    ),
    'blog_category_search_link_new' => array(
      'label' => t('New blog detail page category link'),
      'field types' => array('entityreference'),
    ),
    'branch_title_with_address' => array(
      'label' => t('Branch title with address'),
      'field types' => array('entityreference'),
    ),
    'event_add_to_calendar' => array(
      'label' => t('OPL add event to calendar'),
      'field types' => array('datestamp'),
    ),
    'event_status_details' => array(
      'label' => t('Event status details'),
      'field types' => array('list_boolean'),
    ),
    'event_card_subjects' => array(
      'label' => t('Event card subject headings'),
      'field types' => array('entityreference'),
    ),
    'event_card_subjects_new' => array(
      'label' => t('New event card subject headings'),
      'field types' => array('entityreference'),
      ),
    'event_detail_subjects_new' => array(
      'label' => t('New event detail page subject headings'),
      'field types' => array('entityreference'),
    ),
    'blog_card_subjects' => array(
      'label' => t('Blog card subject headings'),
      'field types' => array('entityreference'),
    ),
    'blog_card_subjects_new' => array(
      'label' => t('New blog card subject headings'),
      'field types' => array('entityreference'),
    ),
    'formatted_database_link' => array(
      'label' => t('Formatted database link with IP check'),
      'field types' => array('link_field'),
    ),
    'database_subjects' => array(
      'label' => t('Database subjects'),
      'field types' => array('entityreference'),
    ),
    'database_subjects_new' => array(
      'label' => t('New database subjects'),
      'field types' => array('entityreference'),
    ),
    'site_announcement_icon' => array(
      'label' => t('Site announcement type and icon'),
      'field types' => array('list_text'),
    ),
    'equipment_booking_link' => array(
      'label' => t('Equipment booking link'),
      'field types' => array('list_text'),
      ),
    'event_image_search_results' => array(
      'label' => t('Event images in search results'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),

    'event_image_search_results_new' => array(
      'label' => t('Event images in search results - using new categories'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
    'external_event_location' => array(
      'label' => t('External event location with link'),
      'field types' => array('text'),
    ),
    'svg_image_tester' => array(
      'label' => t('SVG image test formatter'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
    'external_event_status' => array(
      'label' => t('External event status'),
      'field types' => array('list_integer'),
    ),
    'external_registration_link' => array(
      'label' => t('External registration link'),
      'field types' => array('link_field'),
    ),
    'event_series_link' => array(
      'label' => t('Link to event series'),
      'field types' => array('entityreference','taxonomy_term_reference'),
    )

  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function opl_field_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

if (($display['type'] == 'event_image_search_results') || ($display['type'] == 'event_image_search_results_new')) {

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
  );

  $link_types = array(
      'content' => t('Content'),
      'file' => t('File'),
  );
  $element['image_link'] = array(
      '#title' => t('Link image to'),
      '#type' => 'select',
      '#default_value' => $settings['image_link'],
      '#empty_option' => t('Nothing'),
      '#options' => $link_types,
  );
  return $element;
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function opl_field_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  if ($display['type'] == 'event_image_search_results' || 'event_image_search_results_new') {

    $settings = $display['settings'];

    $summary = array();

    $image_styles = image_style_options(FALSE, PASS_THROUGH);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    // Styles could be lost because of enabled/disabled modules that defines
    // their styles in code.
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    } else {
      $summary[] = t('Original image');
    }

    $link_types = array(
        'content' => t('Linked to content'),
        'file' => t('Linked to file'),
    );
    // Display this setting only if image is linked.
    if (isset($link_types[$settings['image_link']])) {
      $summary[] = $link_types[$settings['image_link']];
    }

    return implode('<br />', $summary);
  }
}

/**
 * Implements hook_field_formatter_prepare_view()
 */

function opl_field_formatters_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  foreach ($entities as $id => $entity) {
    foreach ($displays as $display) {
      switch ($display['type']) {
        case 'event_image_search_results':
            if (empty($items[$id])) {
              $wrapper = entity_metadata_wrapper('node', $entity);
              $term = $wrapper->taxonomy_vocabulary_21->value();
              $items[$id] = $term[0]->field_term_image[LANGUAGE_NONE];
            }

          break;
        case 'event_image_search_results_new':
          if (empty($items[$id])) {
            $wrapper = entity_metadata_wrapper('node', $entity);
            $term = $wrapper->field_category->value();
            if (!empty($term[0]->field_term_image[LANGUAGE_NONE])) {
              $items[$id] = $term[0]->field_term_image[LANGUAGE_NONE];
            }
          }

          break;
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */

function opl_field_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $language;
  $lang = $language->language;
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'event_card_dates':
      $event_lang = $entity->language;
      $event_status = '';
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $sorted_dates = array();
      foreach ($items as $delta => $item) {
        if ($item['value'] > time()) {
          $sorted_dates[] = $item['value'];
        }
      }
      sort($sorted_dates);
      $date_count = count($sorted_dates);
      if ($lang == 'en') {
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '<p>' . t('Sorry, this event has been cancelled.') . '</p>';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0], 'custom', 'l M j, Y') . t(' at ') . format_date($sorted_dates[0], 'event_time') . '</p>';
        } else {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0], 'custom', 'l M j, Y') . t(' at ') . format_date($sorted_dates[0], 'event_time') . ' /' . t(' until ') . format_date($sorted_dates[$date_count - 1], 'event_day')  . '</p>';
        }
      } else {
        setlocale(LC_ALL, 'fr_CA.utf8');
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '<p>' . t('Sorry, this event has been cancelled.') . '</p>';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . ' ' . format_date($sorted_dates[0], 'custom', 'l j F, Y') . t(' at ') . str_replace('h00', 'h', format_date($sorted_dates[0], 'event_time')) . '</p>';

        } else {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0], 'custom', 'l j F, Y') . ' à ' . str_replace('h00', 'h', format_date($sorted_dates[0], 'event_time')) . ' /' . ' jusqu\'à ' . format_date($sorted_dates[$date_count - 1], 'custom', 'j F') . '</p>';
        }
      }
      break;

    case 'event_node_full_dates':
      $event_lang = $entity->language;
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $sorted_dates = array();
      foreach ($items as $delta => $item) {
        if ($item['value'] > time()) {
          $sorted_dates[] = $item['value'];
        }
      }
      // dpm($sorted_dates);
      sort($sorted_dates);
      $start_date = $sorted_dates[0];

      $date_count = count($sorted_dates);
      if ($lang == 'en') {
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0], 'custom', ' l ') . format_date($sorted_dates[0], 'event_day') . t(' at ') . format_date($sorted_dates[0], 'event_time') . '</p>';
        } else {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . format_date($sorted_dates[0], 'custom', ' l') . 's, ' . format_date($start_date, 'event_day') . t(' - ') . format_date($sorted_dates[$date_count - 1], 'event_day') . '<br/>' . format_date($sorted_dates[0], 'event_time') . '</p><p>' . $date_count . ' ' . t('sessions remaining') . '</p>';

        }
      } else {
        setlocale(LC_ALL, 'fr_CA.utf8');
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '<p>' . t('Sorry, this event has been cancelled.') . '</p>';
        }
        elseif ($date_count == 0) {
          $element[0]['#markup'] = '<p>' . t('This event has passed.') . '</p>';
        }
        elseif ($date_count == 1) {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . 'Le ' . format_date($sorted_dates[0], 'custom', ' l ') . format_date($sorted_dates[0], 'custom', 'j F') . t(' at ') . str_replace('h00', 'h', format_date($sorted_dates[0], 'event_time')) . '</p>';
        } else {
          $element[0]['#markup'] = '<p class="card-date"><span><i class="fa fa-clock-o" aria-hidden="true"></i></span> ' . 'Les ' . strtolower(trim(format_date($sorted_dates[0], 'custom', ' l'))) . 's, ' . format_date($start_date, 'custom', 'j F, Y') . t(' - ') . format_date($sorted_dates[$date_count - 1], 'custom', 'j F, Y') . '<br/>' . str_replace('h00', 'h', format_date($sorted_dates[0], 'event_time')) . '</p>';
        }
      }
      break;

    case 'event_node_full_date_list':
      $event_lang = $entity->language;
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $sorted_dates = array();
      foreach ($items as $delta => $item) {
        if ($item['value'] > time()) {
          $sorted_dates[] = $item['value'];
        }
      }

      sort($sorted_dates);

      $formatted_date = array();

      foreach ($sorted_dates as $key => $date) {
        if ($lang == 'en') {
          $formatted_date[] = format_date($date,'short');
        } else {
          setlocale(LC_ALL, 'fr_CA.utf8');
          $formatted_date[] = str_replace('h00', 'h', format_date($date, 'custom', 'j F, Y G\hi'));
        }

      }

      $date_count = count($sorted_dates);

      if ($lang == 'en') {
        if ($event_status == 'cancelled') {
          $element[0]['#markup'] = '';
        }
        elseif ($date_count <= 1) {
          $element[0]['#markup'] = '';
        } else {
          $element[0]['#markup'] = '<button type="button" class="btn event-dates" data-toggle="collapse" data-target="#dates">' . t('View all upcoming dates') . '</button>';
          $element[0]['#markup'] .= '<ul id="dates" class="collapse"><li>' . implode('</li><li>', $formatted_date) . '</li></ul>';

        }
      } else {
        if (($event_status == 'cancelled') || $date_count <=1) {
          $element[0]['#markup'] = '';
        }
        else {
          $element[0]['#markup'] = '<button type="button" class="btn event-dates" data-toggle="collapse" data-target="#dates">' . 'Voir toutes les dates à venir' . '</button>';
          $element[0]['#markup'] .= '<ul id="dates" class="collapse"><li>' . implode('</li><li>', $formatted_date) . '</li></ul>';
        }
      }
      break;

    case 'blog_category_search_link':
     // dpm($items);
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);
        $translated_term = i18n_taxonomy_localize_terms($term);

        $display_terms = l(
            $translated_term->name,
            'staff-blogs',
            array('query' => array('f[' . $delta . ']'=>'taxonomy_vocabulary_21:'.$tid
            )));


        $element[$delta]['#markup'] = $display_terms;
      }

      break;

    case 'blog_category_search_link_new':
      // dpm($items);
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);

        $display_terms = l(
            $term->name,
            'staff-blogs',
            array('query' => array('f[' . $delta . ']'=>'field_category:'.$tid
            )));
        $element[$delta]['#markup'] = $display_terms;
      }

      break;

    case 'branch_title_with_address':
     // dpm($items);
      $link = '';
      foreach ($items as $delta => $item) {
        $nid = $item['target_id'];
        $node = node_load($item['target_id']);
        $address = $node->field_branch_location[LANGUAGE_NONE][0]['street'];
        $room_info = _opl_field_formatters_get_reservations($entity);
        $remaining = count($room_info);
        if ($room_info) {
          $room = $room_info[0]['room'];
          $duration = $room_info[0]['duration'];

        $link = l(
            $node->title,
            drupal_get_path_alias('node/' . $nid, $lang)) . '<br/><div class="street-address">' . $address . '</div>
            <div class="event-room">' . $room . '</div><div class="event-duration">' . $duration . '</div>';

        } else {
        $link = l(
          $node->title,
          drupal_get_path_alias('node/' . $nid, $lang)) . '<br/><div class="street-address">' . $address . '</div>';
        }

        $element[$delta]['#markup'] = $link;
      }

      break;
    
    case 'event_add_to_calendar':
      $event_lang = $entity->language;
      $event_status = isset($entity->field_event_status[$event_lang][0]['value']) ? $entity->field_event_status[$event_lang][0]['value'] : NULL;
      $nid = $entity->nid;
      $sorted_dates = array();
      foreach ($items as $delta => $item) {
        if ($item['value'] > time()) {
            $sorted_dates[] = $item['value'];
        }
      }
      if ($sorted_dates && ($event_status <> 'cancelled')) {
        $link = '<h4>' .l(t('Add this event to your calendar'), 'node/' . $nid . '/opl_add_to_calendar.ics', array('attributes' => array('class' => array('label label-primary')))) . '</h4>';
      } else {
        $link = NULL;
      }
      $element[0]['#markup'] = $link;

      break;

    case 'event_status_details':
      global $user;
      $event_status = opl_registration_event_status($entity);
      $reg_start = str_replace('h 00', 'h', format_date($entity->field_registration_open[LANGUAGE_NONE][0]['value'], 'long'));
      $status_text = '';
      switch ($event_status) {
        case 'no-reg-open' :
          $status_text = '<h3>' . t('Drop-in program') . '</h3>';
          break;
        case 'cancelled' :
          $status_text = '<h3><span class="label label-danger">' . t('Sorry, this event has been cancelled') . '</span></h3>';
          break;
        case 'open' :
          $user->uid == 0 ? $status_text = '<h3>' . l(t('Log in and register'), 'opluser/login', array('query' => array('nid' => $entity->nid), 'attributes' => array('class' => array('btn btn-success')))) . '</h3>'
           : $status_text = '<h3>' . l(t('Register'), 'opluser/login', array('query' => array('nid' => $entity->nid), 'attributes' => array('class' => array('btn btn-success')))) . '</h3>';
          break;
        case 'waitlist' :
          $status_text = '<h3>' . l(t('Add me to the waiting list'), 'opluser/login', array('query' => array('nid' => $entity->nid), 'attributes' => array('class' => array('btn btn-warning')))) . '</h3>';
          break;
        case 'waitlist-full' :
          $status_text = '<h3><span class="label label-danger">' . t('Sorry this event and its waiting list are full') . '</span></h3>';
          break;
        case 'full' :
          $status_text = '<h3><span class="label label-danger">' . t('Sorry this event is full') . '</span></h3>';
          break;
        case 'reg:not-yet-open' :
          $status_text = '<h3>' . t('Registration opens on ') . $reg_start . '</h3>';
          break;
      }

      $element[0]['#markup'] = $status_text;

      break;

    case 'event_card_subjects':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);

        if ($term) {
          $translated_term = i18n_taxonomy_localize_terms($term);

          $display_terms[] = l(
              $translated_term->name,
              'program',
              array('query' => array('f[' . $delta . ']' => 'taxonomy_vocabulary_21:' . $tid
              )));
        }
        if ($delta == 2) {
          break;
        }
      }

      $element[0]['#markup'] = '<header>' . t('Events') . ' / ' . implode(', ', $display_terms) . '</header>';

      break;

    case 'event_card_subjects_new':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);

        if ($term) {

          $display_terms[] = l(
              $term->name,
              'program',
              array('query' => array('f[' . $delta . ']' => 'field_category:' . $tid
              )));
        }
        if ($delta == 2) {
          break;
        }
      }
      $element[0]['#markup'] = '<header>' . l(t('Events'), 'program') . ' / ' . implode(', ', $display_terms) . '</header>';

      break;

    case 'event_detail_subjects_new':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);
        if ($term) {

          $display_terms[] = l(
              $term->name,
              'program',
              array('query' => array('f[' . $delta . ']' => 'field_category:' . $tid
              )));

        }
      }

      $element[0]['#markup'] = implode(', ', $display_terms);

      break;

    case 'blog_card_subjects':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);
        $translated_term = i18n_taxonomy_localize_terms($term);

        $display_terms[] = l(
            $translated_term->name,
            'staff-blogs',
            array('query' => array('f[' . $delta . ']'=>'taxonomy_vocabulary_21:'.$tid
            )));
      }

      $element[0]['#markup'] = '<header>' . l(t('Staff Blog'), 'staff-blogs') . ' / ' . implode(', ', $display_terms) . '</header>';

      break;

    case 'blog_card_subjects_new':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);

        $display_terms[] = l(
            $term->name,
            'staff-blogs',
            array('query' => array('f[' . $delta . ']'=>'field_category:'.$tid
            )));
        if ($delta == 2) {
          break;
        }
      }

      $element[0]['#markup'] = '<header>' . l(t('Staff Blog'), 'staff-blogs') . ' / ' . implode(', ', $display_terms) . '</header>';

      break;

    case 'database_subjects':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);
        $translated_term = i18n_taxonomy_localize_terms($term);

        $display_terms[] = l(
            $translated_term->name,
            'databases/search-all',
            array('query' => array('subject'=>$tid
            )));

        $subject_output = '<ul class="database-subjects">';
        foreach($display_terms as $dt) {
          $subject_output .= '<li>' . $dt . '</li>';
        }
        $subject_output .= '</ul>';


      }

      $element[0]['#markup'] = $subject_output;

      break;

    case 'database_subjects_new':
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['target_id'];
        $term = taxonomy_term_load($tid);

        $display_terms[] = l(
            $term->name,
            'databases/search-all',
            array('query' => array('subject'=>$tid
            )));

        $subject_output = '<ul class="database-subjects">';
        foreach($display_terms as $dt) {
          $subject_output .= '<li>' . $dt . '</li>';
        }
        $subject_output .= '</ul>';


      }

      $element[0]['#markup'] = $subject_output;

      break;

    case 'formatted_database_link':
      global $language;
      $lang = $language->language;
      $wrapper = entity_metadata_wrapper('node', $entity);

      foreach ($items as $delta => $item) {
        $path = 'https://ezproxy.biblioottawalibrary.ca/login';
        $query = isset($item['query']['qurl']) ? $item['query']['qurl'] : NULL;
        if ($item['url'] <> $path) {
          $path = $item['url'];
        }

        // $restricted = field_view_value('node', $entity, 'field_resource_in_library', $items[0]);
        $restricted = $wrapper->field_resource_in_library->value() == 'Yes' ? TRUE : FALSE;
        $title = $wrapper->title_field->value();
        $tooltip = user_is_logged_in() ? t('Go to') : t('Log in and go to');
        // $entity->field_resource_in_library[LANGUAGE_NONE][0]['value'] == 'Yes' ? $restricted = TRUE : $restricted = FALSE;
        if (is_null($query)) {
          $options = array(
              'restricted' => $restricted,
              'html' => TRUE,
              'attributes' => array(
                  'class' => array('btn', 'btn-primary'),
                  'title' => $tooltip . ' ' . $title,
                  'data-toggle' => 'tooltip',
                  'data-placement' => 'bottom',
              ),
          );
        } else {
          $options = array(
              'restricted' => $restricted,
              'query' => array('qurl' => $query),
              'html' => TRUE,
              'attributes' => array(
                  'class' => array('btn', 'btn-primary'),
                  'title' => $tooltip . ' ' . $title,
                  'data-toggle' => 'tooltip',
                  'data-placement' => 'bottom',
              ),
          );
        }
      }

      if(module_exists('opl_ips')) {
        $link = wl($title, $path, $options);
      } else {
        $link = l($title, $path, $options);
      }
      
        $element[0]['#markup'] = $link;

      break;

    case 'site_announcement_icon':
      $status = '';
      foreach ($items as $delta => $item) {
        switch ($item['value']) {
          case 'yellow' :
            $status = 'warning';
            break;
          case 'red' :
            $status = 'danger';
            break;
          case 'green' :
            $status = 'info';
            break;

        }
      }

      $element[0]['#markup'] = $status;

      break;

    case 'equipment_booking_link':
      global $user;
      $wrapper = entity_metadata_wrapper('node', $entity);
      $title = $wrapper->title_field->value();
      $button_text = '';
      foreach ($items as $delta => $item) {
        switch ($item['value']) {
          case 0 :
            user_is_logged_in() ?
              $button_text = l(t('Book'), 'opluser/login', array('query' => array('sch' => $entity->nid), 'attributes' => array('class' => array('btn btn-success'), 'aria-label' => t('Book: ') . $title))) :
              $button_text = l(t('Login and Book'), 'opluser/login', array('query' => array('sch' => $entity->nid), 'attributes' => array('class' => array('btn,btn-success'), 'aria-label' => t('Book: ') . $title)));
            break;

          case 1 :
            $button_qualifier = t('7-day loans, not holdable');
            $button_text = '<p class="alert alert-warning">' . $button_qualifier . '</p>' .
                l(t('Check availability'), 'https://ottawa.bibliocommons.com/search', array('query' => array('custom_query' => 'title:(' . $title . ')'),'attributes' => array('class' => array('btn btn-info'), 'aria-label' => t('Check availability for: ') . $title . ', ' . t('which is available for ') . $button_qualifier . ' ' . t('(Link is external)'))));
            break;

          case 2 :
            $button_qualifier = t('2-hour loan, must remain in branch');
            $button_text = '<p class="alert alert-warning">' . $button_qualifier . '</p>' .
                l(t('Check availability'), 'https://ottawa.bibliocommons.com/search', array('query' => array('custom_query' => 'title:(' . $title . ')'),'attributes' => array('class' => array('btn btn-info'), 'aria-label' => t('Check availability for: ') . $title . ', ' . t('which is available for ') . $button_qualifier . ' '. t('(Link is external)'))));
            break;
        }
      }
      $element[0]['#markup'] = $button_text;

      break;

    case 'event_image_search_results':
        foreach ($items as $delta => $item) {

          $mime = file_get_mimetype($item['uri']);

          if ($mime == 'image/svg+xml') {

            $path = drupal_realpath($item['uri']);
            if (file_exists($path)) {
              $classes = array('svg-object','svg-image','img-responsive');

              $attrs = array(
                  'class' => $classes
              );
              $attrs['data'] = file_create_url($item['uri']);
              $attrs['type'] = "image/svg+xml";

             // $attrs['src'] = file_create_url($item['uri']);

              $render_map = array(
              //  '#theme' => 'image_formatter',
              //  '#item' => $item,
              //  '#image_style' => $display['settings']['image_style'],
              //  '#path' => isset($uri) ? $uri : '',
                '#markup' => '<object' . drupal_attributes($attrs) . '><img src="' . file_create_url($item['uri']) . '.png" /></object>',
              );
            }

            $element[$delta] = $render_map;

          } else {
            $element[$delta] = array(
              '#theme' => 'image_formatter',
              '#item' => $item,
              '#image_style' => $display['settings']['image_style'],
              '#path' => isset($uri) ? $uri : '',
            );
          }
        }

      break;

    case 'event_image_search_results_new':
      foreach ($items as $delta => $item) {

        $mime = file_get_mimetype($item['uri']);

        if ($mime == 'image/svg+xml') {

          $path = drupal_realpath($item['uri']);
          if (file_exists($path)) {
            $classes = array('svg-object','svg-image','img-responsive');

            $attrs = array(
                'class' => $classes
            );
            $attrs['data'] = file_create_url($item['uri']);
            $attrs['type'] = "image/svg+xml";

            // $attrs['src'] = file_create_url($item['uri']);

            $render_map = array(
              //  '#theme' => 'image_formatter',
              //  '#item' => $item,
              //  '#image_style' => $display['settings']['image_style'],
              //  '#path' => isset($uri) ? $uri : '',
                '#markup' => '<object' . drupal_attributes($attrs) . '><img src="' . file_create_url($item['uri']) . '.png" /></object>',
            );
          } else {
            $render_map = NULL;
          }

          $element[$delta] = $render_map;

        } else {
          $element[$delta] = array(
              '#theme' => 'image_formatter',
              '#item' => $item,
              '#image_style' => $display['settings']['image_style'],
              '#path' => isset($uri) ? $uri : '',
          );
        }
      }

      break;

    case 'external_event_location':
      foreach ($items as $delta => $item) {
        $loc_name = $item['value'];
        $link = isset($entity->field_link_to_venue_details[LANGUAGE_NONE][0]['url']) ? $entity->field_link_to_venue_details[LANGUAGE_NONE][0]['url'] : NULL;
      }
      if ($link) {
        $element[0]['#markup'] = l($loc_name, $link);
      } else {
        $element[0]['#markup'] = $loc_name;
      }
    break;

    case 'svg_image_tester':
      foreach ($items as $delta => $item) {

        $mime = file_get_mimetype($item['uri']);

        if ($mime == 'image/svg+xml') {

          $path = drupal_realpath($item['uri']);
          if (file_exists($path)) {
            $classes = array('svg-object','svg-image','img-responsive');

            $attrs = array(
                'class' => $classes
            );
            $attrs['data'] = file_create_url($item['uri']);
            $attrs['type'] = "image/svg+xml";

            // $attrs['src'] = file_create_url($item['uri']);

            $render_map = array(
              //  '#theme' => 'image_formatter',
              //  '#item' => $item,
              //  '#image_style' => $display['settings']['image_style'],
              //  '#path' => isset($uri) ? $uri : '',
                '#markup' => '<object' . drupal_attributes($attrs) . '><img src="' . file_create_url($item['uri']) . '.png" /></object>',
            );
          }

          $element[$delta] = $render_map;

        } else {
          $element[$delta] = array(
              '#theme' => 'image_formatter',
              '#item' => $item,
              '#image_style' => $display['settings']['image_style'],
              '#path' => isset($uri) ? $uri : '',
          );
        }
      }

      break;

    case 'external_event_status' :
      $text = '';
      foreach ($items as $delta => $item) {
        switch ($item['value']) {
          case 1 :
          break;
          case 2 :
            $text = '<span class="alert alert-danger">' . t('This event has been cancelled') . '</span>';
          break;
          case 3 :
            $text = '<span class="alert alert-danger">' . t('This event is now sold out') . '</span>';
          break;
        }
      }

      $element[0]['#markup'] = $text;

    break;

    case 'external_registration_link' :
      foreach ($items as $delta => $item) {
        $link = $item['display_url'];
        $title = $item['title'];
        if($link == $title) {
          $title = NULL;
        }
      }

      // Only show button if external event is active, not cancelled or sold out
      if ($entity->field_external_event_status[LANGUAGE_NONE][0]['value'] == 1) {
        if ($title) {
          $element[0]['#markup'] = l($title, $link, array('attributes' => array('class' => array('ext-register btn btn-success'))));
        } else {
          $element[0]['#markup'] = l(t('Register'), $link, array('attributes' => array('class' => array('ext-register btn btn-success'))));
        }
      }

    break;

    case 'event_series_link' :
      $display_terms = array();
      foreach ($items as $delta => $item) {
        $tid = $item['tid'];
        $term = taxonomy_term_load($tid);
        $translated_term = i18n_taxonomy_localize_terms($term);

          if ($translated_term) {

            $display_terms[] = l(
                $translated_term->name,
                'program',
                array('query' => array('f[' . $delta . ']' => 'field_series_1:' . $tid
                )));
          }
          if ($delta == 2) {
            break;
          }
        }
        $element[0]['#markup'] = implode(', ', $display_terms);

    break;

  }

  return $element;
}



/**
 * Implements hook_menu().
 */
function opl_field_formatters_menu() {
  $items = array();

  $items['node/%node/opl_add_to_calendar.ics'] = array(
      'title' => t('Add to Calendar'),
      'page callback' => 'opl_field_formatters_ics_download',
      'page arguments' => array(1),
      'access callback' => 'node_access',
      'access arguments' => array('view', 1),
      'type' => MENU_CALLBACK,
  );

  return $items;
}



/*
 * Calendar functions
 */

function opl_field_formatters_ics_download($node) {
  global $language;
  $lang = $language->language;

  drupal_add_http_header('Content-Type','text/calendar; charset=utf-8;');
  drupal_add_http_header('Content-Disposition','inline; filename="add_to_calendar.ics";');

// 	$description = t("Read more at !link", array('!link' => url('node/' . $node->nid, array('absolute' => TRUE))));
  $description = isset($node->body['en'][0]['safe_value']) ? $node->body['en'][0]['safe_value'] : $node->body[LANGUAGE_NONE][0]['safe_value'];
  $created = date("Ymd\THis\Z",$node->created);
  $reservations = opl_reservation_load_by_nid($node->nid);
  if (isset($reservations) && !empty($reservations)) {
    $dates = array();
    // $loc_details = array();
    foreach ($reservations as $rid => $reservation) {
      $dates[] = $reservation->field_reservation_date[LANGUAGE_NONE][0]['value'];
    }
  }
  $title = $node->title;
  $date_c = array();
  $branch_id = $node->field_event_branch[LANGUAGE_NONE][0]['target_id'];
  $branch = node_load($branch_id);
  $branch_name = $branch->title;

  foreach ($dates as $key => $value) {
    if (isset($value) && !empty($value) && $value >= strtotime('today')) {
      $date_c[] = $value;
    }
  }
  $duration = $reservation->field_event_duration[LANGUAGE_NONE][0]['value'];
  $date_output = '';
  foreach ($date_c as $did=>$date) {
    $startdate = date("Ymd\THis",$date);
    $enddate = date("Ymd\THis",($date + ($duration * 60)));
    $date_output .= "BEGIN:VEVENT
DTSTAMP:$created
UID:event$node->nid-$did@biblioottawalibrary.ca
ORGANIZER;CN=Ottawa Public Library:MAILTO:infoservice@biblioottawalibrary.ca
DTSTART;TZID=America/Toronto:$startdate
DTEND;TZID=America/Toronto:$enddate
SUMMARY:$title
DESCRIPTION:$description
LOCATION:$branch_name
SEQUENCE:0
END:VEVENT\r\n";
  }

  print "BEGIN:VCALENDAR
PRODID:-//Calendar//Calendar Event//EN
VERSION:2.0
METHOD:PUBLISH
$date_output
END:VCALENDAR";
  exit();
}

/*
 * wrapper function around opl_reservation_load_by_nid
 */

//This will need to be updated or replaced after Frank's update from bookings-reservations-refactor branch

function _opl_field_formatters_get_reservations(&$entity) {
  global $language;
  $sorted_dates = array();
  $curdates = array();
  $reservations = opl_reservation_load_by_nid($entity->nid);
  $loc_details = array();

  //if there's registrations and the event is not past, cancelled
  if (isset($reservations) && !empty($reservations)) {
    foreach ($reservations as $rid => $reservation) {
      $meeting_room_node = node_load($reservation->field_meeting_room[LANGUAGE_NONE][0]['target_id']);
      //Test Getachew
      $eventdate = format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value']);
      $onlydate = explode(' - ', $eventdate);
      $todayd= date("F d, Y");
      if ($language->language == 'fr'){
        setlocale(LC_ALL, 'fr_CA.utf8');
        $todayf= strftime("%A %d %B %Y", mktime(0, 0, 0, date("m"), date("d"), date("Y")));
      }

      //if( strtotime($onlydate[0]) > strtotime($todayd)){
      if ($reservation->field_reservation_date[LANGUAGE_NONE][0]['value'] > strtotime($todayd))
        $sorted_dates[] = $reservation->field_reservation_date[LANGUAGE_NONE][0]['value'];

      //end
//      $loc_details[] = array(
//          'date' => str_replace('h 00', 'h', format_date($reservation->field_reservation_date[LANGUAGE_NONE][0]['value'], 'long')),
//          'room' => $meeting_room_node->title,
//          'duration' => $reservation->field_event_duration[LANGUAGE_NONE][0]['value'] . ' ' . t('mins.'),
//      );
    }
    asort($sorted_dates);

    foreach ($sorted_dates as $sd => $sorted_date) {
      $curdates = str_replace('h 00', 'h', format_date($sorted_date, 'long'));
      $loc_details[] = array(
          'date' => $curdates,
          'room' => $meeting_room_node->title,
          'duration' => $reservation->field_event_duration[LANGUAGE_NONE][0]['value'] . ' ' . t('mins.'),
      );
    }


  }
    return $loc_details;
}
